#include <bits/stdc++.h>
using namespace std;
class solution
{
public:
    /* Time complexity:O(n**2)
     Aux Space:O(2n) */
    int pairClosestSum(vector<int> a, int sum)
    {
        int n = a.size();
        vector<int> sums;
        for (size_t i = 0; i < n; i++)
        {
            for (size_t j = i + 1; j < n; j++)
            {
                sums.push_back(a[i] + a[j]);
            }
        }
        // vector sum is carrying all sums which can be generated by each pair
        vector<int> distance(sums.size());
        int min_distance = INT_MAX;
        int res = -1;
        for (size_t i = 0; i < sums.size(); i++)
        {
            distance[i] = abs(sum - sums[i]);
            // min_distance = min(min_distance, distance[i]);
            if (distance[i] < min_distance)
            {
                min_distance = distance[i];
                res = i;
            }
        }
        // debugging logs
        // cout << "\nDetails:\n";
        // for (size_t i = 0; i < sums.size(); i++)
        // {
        //     cout << sums[i] << " ";
        // }
        // cout << "\n";
        // for (size_t i = 0; i < distance.size(); i++)
        // {
        //     cout << distance[i] << " ";
        // }
        // cout << "\n";
        // cout << "res:" << res << "\n";
        return sums[res];
    }
    int optimizedPairClosestSum(vector<int> a, int sum)
    {
        int n = a.size();
        int p1 = 0, p2 = n - 1;
        
    }
};
solution obj;

int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n, sum;
        cin >> n >> sum;
        vector<int> v(n);
        for (size_t i = 0; i < n; i++)
        {
            cin >> v[i];
        }
        n = 90;
        cout << obj.pairClosestSum(v, sum) << endl;
    }

    return 0;
}